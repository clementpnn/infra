# =============================================================================
# Secrets GitLab Enterprise - Configuration Production
# =============================================================================
#
# Tous les secrets nécessaires pour GitLab Enterprise en production.
# Remplacez les valeurs base64 par vos vraies valeurs encodées.
#
# Pour encoder une valeur : echo -n "votre-valeur" | base64
# Pour décoder une valeur : echo "valeur-base64" | base64 -d
#
# =============================================================================

---
apiVersion: v1
kind: Namespace
metadata:
  name: gitlab
  labels:
    name: gitlab
    app.kubernetes.io/name: gitlab
    app.kubernetes.io/part-of: infrastructure

---
# Secret PostgreSQL pour GitLab
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-postgresql-secret
  namespace: gitlab
  labels:
    app.kubernetes.io/name: gitlab
    app.kubernetes.io/component: database
type: Opaque
data:
  # postgres-password: généré automatiquement (32 chars)
  postgres-password: UDBzdGdyZXNfUEFTU1dPUkRfMzJfQ0hBUlNfSEVSRQ==
  # password: mot de passe utilisateur gitlab (32 chars)
  password: R0lUTEFCX0RCX1BBU1NXT1JEXzMyX0NIQVJTX0hFUkU=

---
# Secret Redis pour GitLab
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-redis-secret
  namespace: gitlab
  labels:
    app.kubernetes.io/name: gitlab
    app.kubernetes.io/component: cache
type: Opaque
data:
  # password: mot de passe Redis (32 chars)
  password: UkVESVNfUEFTU1dPUkRfMzJfQ0hBUlNfSEVSRQ==

---
# Secret MinIO pour GitLab (stockage objets)
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-minio-secret
  namespace: gitlab
  labels:
    app.kubernetes.io/name: gitlab
    app.kubernetes.io/component: object-storage
type: Opaque
data:
  # accesskey: minio-admin
  accesskey: bWluaW8tYWRtaW4=
  # secretkey: clé secrète MinIO (40 chars)
  secretkey: TUlOSU9fU0VDUkVUX0tFWV80MF9DSEFSU19IRVJF

---
# Secret SMTP pour notifications GitLab
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-smtp-secret
  namespace: gitlab
  labels:
    app.kubernetes.io/name: gitlab
    app.kubernetes.io/component: email
type: Opaque
data:
  # password: mot de passe application Gmail
  password: Vk9UUkVfTU9UX0RFX1BBU1NFX0dNQUlMX0FQUDEyMw==

---
# Secret OAuth Keycloak pour GitLab SSO
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-keycloak-secret
  namespace: gitlab
  labels:
    app.kubernetes.io/name: gitlab
    app.kubernetes.io/component: authentication
type: Opaque
stringData:
  provider: |
    {
      "name": "openid_connect",
      "label": "Keycloak SSO",
      "args": {
        "name": "openid_connect",
        "scope": ["openid", "profile", "email"],
        "response_type": "code",
        "issuer": "https://auth.clementpnn.com/realms/infrastructure",
        "client_auth_method": "query",
        "discovery": true,
        "uid_field": "preferred_username",
        "client_options": {
          "identifier": "gitlab",
          "secret": "VOTRE_SECRET_CLIENT_KEYCLOAK_ICI",
          "redirect_uri": "https://gitlab.clementpnn.com/users/auth/openid_connect/callback"
        }
      }
    }

---
# Secret GitLab Shell pour SSH
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-shell-secret
  namespace: gitlab
  labels:
    app.kubernetes.io/name: gitlab
    app.kubernetes.io/component: shell
type: Opaque
data:
  # secret: token hex 64 chars pour GitLab Shell
  secret: R0lUTEFCX1NIRUxMX1NFQ1JFVF9IRVhfNjRfQ0hBUlNfSEVSRQ==

---
# Clés SSH host pour GitLab
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-shell-host-keys
  namespace: gitlab
  labels:
    app.kubernetes.io/name: gitlab
    app.kubernetes.io/component: ssh-keys
type: Opaque
stringData:
  ssh_host_rsa_key: |
    -----BEGIN OPENSSH PRIVATE KEY-----
    # REMPLACEZ PAR VOTRE VRAIE CLÉ RSA PRIVÉE
    # Générez avec: ssh-keygen -t rsa -b 4096 -f gitlab_rsa -N ""
    -----END OPENSSH PRIVATE KEY-----
  ssh_host_rsa_key.pub: |
    ssh-rsa AAAAB3NzaC1yc2EAAA... # REMPLACEZ PAR VOTRE CLÉ PUBLIQUE RSA
  ssh_host_ed25519_key: |
    -----BEGIN OPENSSH PRIVATE KEY-----
    # REMPLACEZ PAR VOTRE VRAIE CLÉ ED25519 PRIVÉE
    # Générez avec: ssh-keygen -t ed25519 -f gitlab_ed25519 -N ""
    -----END OPENSSH PRIVATE KEY-----
  ssh_host_ed25519_key.pub: |
    ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAA... # REMPLACEZ PAR VOTRE CLÉ PUBLIQUE ED25519

---
# Secret Gitaly (stockage Git)
apiVersion: v1
kind: Secret
metadata:
  name: gitaly-secret
  namespace: gitlab
  labels:
    app.kubernetes.io/name: gitlab
    app.kubernetes.io/component: gitaly
type: Opaque
data:
  # token: token GitLab format (glpat-XXXXXXXXXXXXXXXXXXXX)
  token: Z2xwYXQtR0lUQUxZX1RPS0VOXzIwX0NIQVJTX0hFUkU=

---
# Secrets Container Registry
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-registry-secret
  namespace: gitlab
  labels:
    app.kubernetes.io/name: gitlab
    app.kubernetes.io/component: registry
type: Opaque
data:
  # haSharedSecret: secret partagé registry (hex 64 chars)
  haSharedSecret: UkVHSVNUUllfU0hBUkVEX1NFQ1JFVF9IRVhfNjRfQ0hBUlM=

---
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-registry-httpsecret
  namespace: gitlab
  labels:
    app.kubernetes.io/name: gitlab
    app.kubernetes.io/component: registry
type: Opaque
data:
  # secret: même valeur que haSharedSecret
  secret: UkVHSVNUUllfSEVYX1NFQ1JFVF82NF9DSEFSUw==

---
# Configuration stockage Registry (MinIO)
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-registry-storage-secret
  namespace: gitlab
  labels:
    app.kubernetes.io/name: gitlab
    app.kubernetes.io/component: registry-storage
type: Opaque
stringData:
  config: |
    s3:
      accesskey: minio-admin
      secretkey: MINIO_SECRET_KEY_40_CHARS_HERE
      bucket: gitlab-registry
      region: us-east-1
      regionendpoint: http://gitlab-minio:9000
      encrypt: false
      secure: false
      v4auth: true
      rootdirectory: /

---
# Configuration stockage objets principal
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-object-storage-secret
  namespace: gitlab
  labels:
    app.kubernetes.io/name: gitlab
    app.kubernetes.io/component: object-storage
type: Opaque
stringData:
  connection: |
    provider: AWS
    region: us-east-1
    aws_access_key_id: minio-admin
    aws_secret_access_key: MINIO_SECRET_KEY_40_CHARS_HERE
    host: gitlab-minio:9000
    endpoint: http://gitlab-minio:9000
    path_style: true
    aws_signature_version: 4

---
# Secrets stockage pour artefacts CI/CD
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-artifacts-secret
  namespace: gitlab
  labels:
    app.kubernetes.io/name: gitlab
    app.kubernetes.io/component: artifacts
type: Opaque
stringData:
  connection: |
    provider: AWS
    region: us-east-1
    aws_access_key_id: minio-admin
    aws_secret_access_key: MINIO_SECRET_KEY_40_CHARS_HERE
    host: gitlab-minio:9000
    endpoint: http://gitlab-minio:9000
    path_style: true
    aws_signature_version: 4

---
# Secrets stockage pour Git LFS
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-lfs-secret
  namespace: gitlab
  labels:
    app.kubernetes.io/name: gitlab
    app.kubernetes.io/component: lfs
type: Opaque
stringData:
  connection: |
    provider: AWS
    region: us-east-1
    aws_access_key_id: minio-admin
    aws_secret_access_key: MINIO_SECRET_KEY_40_CHARS_HERE
    host: gitlab-minio:9000
    endpoint: http://gitlab-minio:9000
    path_style: true
    aws_signature_version: 4

---
# Secrets stockage pour uploads
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-uploads-secret
  namespace: gitlab
  labels:
    app.kubernetes.io/name: gitlab
    app.kubernetes.io/component: uploads
type: Opaque
stringData:
  connection: |
    provider: AWS
    region: us-east-1
    aws_access_key_id: minio-admin
    aws_secret_access_key: MINIO_SECRET_KEY_40_CHARS_HERE
    host: gitlab-minio:9000
    endpoint: http://gitlab-minio:9000
    path_style: true
    aws_signature_version: 4

---
# Secrets stockage pour packages
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-packages-secret
  namespace: gitlab
  labels:
    app.kubernetes.io/name: gitlab
    app.kubernetes.io/component: packages
type: Opaque
stringData:
  connection: |
    provider: AWS
    region: us-east-1
    aws_access_key_id: minio-admin
    aws_secret_access_key: MINIO_SECRET_KEY_40_CHARS_HERE
    host: gitlab-minio:9000
    endpoint: http://gitlab-minio:9000
    path_style: true
    aws_signature_version: 4

---
# Secrets stockage pour GitLab Pages
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-pages-secret
  namespace: gitlab
  labels:
    app.kubernetes.io/name: gitlab
    app.kubernetes.io/component: pages
type: Opaque
stringData:
  connection: |
    provider: AWS
    region: us-east-1
    aws_access_key_id: minio-admin
    aws_secret_access_key: MINIO_SECRET_KEY_40_CHARS_HERE
    host: gitlab-minio:9000
    endpoint: http://gitlab-minio:9000
    path_style: true
    aws_signature_version: 4

---
# Secret backup S3
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-backup-s3-secret
  namespace: gitlab
  labels:
    app.kubernetes.io/name: gitlab
    app.kubernetes.io/component: backup
type: Opaque
data:
  # access-key: clé d'accès S3 pour backups
  access-key: Vk9UUkVfQ0xFX0FDQ0VTX1MzX0JBQ0tVUA==
  # secret-key: clé secrète S3 pour backups
  secret-key: Vk9UUkVfQ0xFX1NFQ1JFVEVfUzNfQkFDS1VQ

---
# Secret mot de passe root GitLab initial
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-initial-root-password
  namespace: gitlab
  labels:
    app.kubernetes.io/name: gitlab
    app.kubernetes.io/component: authentication
type: Opaque
data:
  # password: mot de passe root généré (24 chars)
  password: R0lUTEFCX1JPT1RfUEFTU1dPUkRfMjRfQ0hBUlM=

---
# Secret authentification MinIO admin (BasicAuth pour Traefik)
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-minio-admin-auth
  namespace: gitlab
  labels:
    app.kubernetes.io/name: gitlab
    app.kubernetes.io/component: minio-auth
type: Opaque
data:
  # users: admin:minio2024! (généré avec htpasswd)
  users: YWRtaW46JGFwcjEkSDZkdm5pTkwkTzJCWUxQVWQzSVdQNEc4TUtWMHJhMQ==

---
# Secret token registration GitLab Runner
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-runner-secret
  namespace: gitlab
  labels:
    app.kubernetes.io/name: gitlab-runner
    app.kubernetes.io/component: ci-runner
type: Opaque
data:
  # runner-registration-token: token de registration runner (récupéré dans GitLab)
  runner-registration-token: Vk9UUkVfVE9LRU5fUlVOTkVSX0dJVExBQg==
  # runner-token: token runner après registration
  runner-token: ""

---
# Secret certificats internes GitLab
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-wildcard-tls-ca
  namespace: gitlab
  labels:
    app.kubernetes.io/name: gitlab
    app.kubernetes.io/component: certificates
type: Opaque
stringData:
  # Certificat CA auto-signé pour communication interne
  tls.crt: |
    -----BEGIN CERTIFICATE-----
    # CERTIFICAT CA AUTO-SIGNÉ POUR GITLAB
    # Généré automatiquement par GitLab si non fourni
    -----END CERTIFICATE-----
  tls.key: |
    -----BEGIN RSA PRIVATE KEY-----
    # CLÉ PRIVÉE CA AUTO-SIGNÉE POUR GITLAB
    # Généré automatiquement par GitLab si non fourni
    -----END RSA PRIVATE KEY-----

---
# Secret configuration Rails pour GitLab
apiVersion: v1
kind: Secret
metadata:
  name: gitlab-rails-secret
  namespace: gitlab
  labels:
    app.kubernetes.io/name: gitlab
    app.kubernetes.io/component: rails
type: Opaque
data:
  # secrets.yml: configuration Rails générée automatiquement
  secrets.yml: ""
