# =============================================================================
# IngressRoutes Traefik Production pour Stack de Secrets Management
# =============================================================================
#
# Configuration production pour l'exposition de la stack de secrets via Traefik :
# - HashiCorp Vault (secrets management enterprise)
# - Bitwarden/Vaultwarden (password manager)
#
# Avec :
# - HTTPS automatique via Cert-Manager (Let's Encrypt)
# - Redirection HTTP vers HTTPS obligatoire
# - Headers de sécurité renforcés
# - Authentification basique pour Vault
# - Rate limiting adapté par service
# - IP whitelisting pour interfaces sensibles
# - Monitoring et logs de sécurité
# - Gestion d'erreurs personnalisées
#
# =============================================================================

---
# IngressRoute HTTPS pour HashiCorp Vault
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: vault-https
  namespace: secrets
  labels:
    app.kubernetes.io/name: vault
    app.kubernetes.io/component: ingress
    app.kubernetes.io/part-of: secrets-stack
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    argocd.argoproj.io/sync-wave: "4"
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`vault.clementpnn.com`)
      kind: Rule
      services:
        - name: vault
          port: 8200
          scheme: https
      middlewares:
        - name: vault-security-headers
        - name: vault-auth
        - name: vault-rate-limit
        - name: secrets-ip-whitelist
  tls:
    secretName: vault-tls
    domains:
      - main: vault.clementpnn.com

---
# IngressRoute HTTP redirect pour Vault
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: vault-http-redirect
  namespace: secrets
  labels:
    app.kubernetes.io/name: vault
    app.kubernetes.io/component: ingress
spec:
  entryPoints:
    - web
  routes:
    - match: Host(`vault.clementpnn.com`)
      kind: Rule
      services:
        - name: vault
          port: 8200
      middlewares:
        - name: https-redirect

---
# IngressRoute HTTPS pour Bitwarden
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: bitwarden-https
  namespace: secrets
  labels:
    app.kubernetes.io/name: bitwarden
    app.kubernetes.io/component: ingress
    app.kubernetes.io/part-of: secrets-stack
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    argocd.argoproj.io/sync-wave: "4"
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`passwords.clementpnn.com`)
      kind: Rule
      services:
        - name: vaultwarden
          port: 80
          scheme: http
      middlewares:
        - name: bitwarden-security-headers
        - name: bitwarden-rate-limit
  tls:
    secretName: bitwarden-tls
    domains:
      - main: passwords.clementpnn.com

---
# IngressRoute HTTP redirect pour Bitwarden
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: bitwarden-http-redirect
  namespace: secrets
  labels:
    app.kubernetes.io/name: bitwarden
    app.kubernetes.io/component: ingress
spec:
  entryPoints:
    - web
  routes:
    - match: Host(`passwords.clementpnn.com`)
      kind: Rule
      services:
        - name: vaultwarden
          port: 80
      middlewares:
        - name: https-redirect

---
# IngressRoute pour API Bitwarden (applications et intégrations)
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: bitwarden-api-https
  namespace: secrets
  labels:
    app.kubernetes.io/name: bitwarden
    app.kubernetes.io/component: api
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`passwords-api.clementpnn.com`)
      kind: Rule
      services:
        - name: vaultwarden
          port: 80
          scheme: http
      middlewares:
        - name: api-security-headers
        - name: api-rate-limit
  tls:
    secretName: bitwarden-api-tls
    domains:
      - main: passwords-api.clementpnn.com

---
# Middleware pour redirection HTTPS obligatoire
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: https-redirect
  namespace: secrets
  labels:
    app.kubernetes.io/name: secrets-stack
    app.kubernetes.io/component: middleware
spec:
  redirectScheme:
    scheme: https
    permanent: true

---
# Middleware pour headers de sécurité Vault (maximum security)
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: vault-security-headers
  namespace: secrets
  labels:
    app.kubernetes.io/name: vault
    app.kubernetes.io/component: middleware
spec:
  headers:
    customRequestHeaders:
      X-Forwarded-Proto: https
      X-Forwarded-Port: "443"
      X-Real-IP: ""
    customResponseHeaders:
      # Headers de sécurité maximale pour Vault
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      X-XSS-Protection: "1; mode=block"
      Strict-Transport-Security: "max-age=31536000; includeSubDomains; preload"
      Referrer-Policy: no-referrer
      Permissions-Policy: "camera=(), microphone=(), geolocation=(), payment=(), usb=(), serial=()"
      X-Permitted-Cross-Domain-Policies: none

      # Cache control strict pour éviter la mise en cache
      Cache-Control: "no-cache, no-store, must-revalidate, max-age=0, private"
      Pragma: "no-cache"
      Expires: "0"

      # CSP très strict pour Vault UI
      Content-Security-Policy: >-
        default-src 'self';
        script-src 'self' 'unsafe-inline';
        style-src 'self' 'unsafe-inline';
        img-src 'self' data:;
        font-src 'self';
        connect-src 'self';
        form-action 'self';
        frame-ancestors 'none';
        object-src 'none';
        base-uri 'none';
        upgrade-insecure-requests

---
# Middleware pour headers de sécurité Bitwarden
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: bitwarden-security-headers
  namespace: secrets
  labels:
    app.kubernetes.io/name: bitwarden
    app.kubernetes.io/component: middleware
spec:
  headers:
    customRequestHeaders:
      X-Forwarded-Proto: https
      X-Forwarded-Port: "443"
      X-Real-IP: ""
    customResponseHeaders:
      # Headers de sécurité pour application web Bitwarden
      X-Content-Type-Options: nosniff
      X-Frame-Options: SAMEORIGIN
      X-XSS-Protection: "1; mode=block"
      Strict-Transport-Security: "max-age=31536000; includeSubDomains; preload"
      Referrer-Policy: strict-origin-when-cross-origin
      Permissions-Policy: "camera=(), microphone=(), geolocation=(), payment=()"

      # Cache optimisé pour application web
      Cache-Control: "private, no-cache, no-store, must-revalidate"
      Pragma: "no-cache"

      # CSP adapté pour Bitwarden web app
      Content-Security-Policy: >-
        default-src 'self';
        script-src 'self' 'unsafe-inline' 'unsafe-eval';
        style-src 'self' 'unsafe-inline';
        img-src 'self' data: https:;
        font-src 'self' data:;
        connect-src 'self' wss: https:;
        form-action 'self';
        frame-ancestors 'self';
        object-src 'none';
        base-uri 'self';
        upgrade-insecure-requests

---
# Middleware pour headers API Bitwarden
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: api-security-headers
  namespace: secrets
  labels:
    app.kubernetes.io/name: bitwarden
    app.kubernetes.io/component: middleware
spec:
  headers:
    customRequestHeaders:
      X-Forwarded-Proto: https
      X-Forwarded-Port: "443"
    customResponseHeaders:
      X-Content-Type-Options: nosniff
      X-Frame-Options: DENY
      Strict-Transport-Security: "max-age=31536000; includeSubDomains"
      Cache-Control: "no-cache, no-store, must-revalidate"

---
# Middleware d'authentification pour Vault
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: vault-auth
  namespace: secrets
  labels:
    app.kubernetes.io/name: vault
    app.kubernetes.io/component: middleware
spec:
  basicAuth:
    secret: secrets-vault-auth
    realm: "HashiCorp Vault - Enterprise Secrets Management"

---
# Middleware de rate limiting strict pour Vault
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: vault-rate-limit
  namespace: secrets
  labels:
    app.kubernetes.io/name: vault
    app.kubernetes.io/component: middleware
spec:
  rateLimit:
    period: 1m
    burst: 30
    average: 15
    sourceCriterion:
      ipStrategy:
        depth: 1

---
# Middleware de rate limiting pour Bitwarden
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: bitwarden-rate-limit
  namespace: secrets
  labels:
    app.kubernetes.io/name: bitwarden
    app.kubernetes.io/component: middleware
spec:
  rateLimit:
    period: 1m
    burst: 100
    average: 60
    sourceCriterion:
      ipStrategy:
        depth: 1

---
# Middleware de rate limiting pour API Bitwarden
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: api-rate-limit
  namespace: secrets
  labels:
    app.kubernetes.io/name: bitwarden
    app.kubernetes.io/component: middleware
spec:
  rateLimit:
    period: 1m
    burst: 200
    average: 100
    sourceCriterion:
      ipStrategy:
        depth: 1

---
# Middleware de whitelist IP pour services critiques
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: secrets-ip-whitelist
  namespace: secrets
  labels:
    app.kubernetes.io/name: secrets-stack
    app.kubernetes.io/component: middleware
spec:
  ipWhiteList:
    sourceRange:
      # Réseau local d'administration
      - "192.168.1.0/24"
      - "10.0.0.0/8"
      - "172.16.0.0/12"
      # VPN OPNsense
      - "10.8.0.0/24"
      # IP publique d'administration (à ajuster)
      - "65.21.12.110/32"
      # Permettre le trafic depuis les autres services du cluster
      - "10.42.0.0/16"

---
# Secret pour l'authentification Vault
apiVersion: v1
kind: Secret
metadata:
  name: secrets-vault-auth
  namespace: secrets
  labels:
    app.kubernetes.io/name: vault
    app.kubernetes.io/component: auth
type: Opaque
data:
  # vault-admin:VaultSecureAdmin2024! (généré avec htpasswd -B)
  users: dmF1bHQtYWRtaW46JDJ5JDEwJGRmS2VITVFsWERkWTJmVXhHM0xvQnVoWmhwTEUyaG1CdTNmYU9yZ2ltV3hPZnRXUVlULjY=

---
# Certificats SSL pour tous les services de secrets
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: vault-tls-certificate
  namespace: secrets
  labels:
    app.kubernetes.io/name: vault
    app.kubernetes.io/component: certificate
spec:
  secretName: vault-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
    - vault.clementpnn.com
  renewBefore: 720h  # 30 jours avant expiration
  duration: 2160h    # 90 jours
  privateKey:
    algorithm: RSA
    size: 2048
  subject:
    organizations:
      - "Infrastructure Clement"
    organizationalUnits:
      - "Secrets Management"
    countries:
      - "FR"

---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: bitwarden-tls-certificate
  namespace: secrets
  labels:
    app.kubernetes.io/name: bitwarden
    app.kubernetes.io/component: certificate
spec:
  secretName: bitwarden-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
    - passwords.clementpnn.com
  renewBefore: 720h
  duration: 2160h
  privateKey:
    algorithm: RSA
    size: 2048
  subject:
    organizations:
      - "Infrastructure Clement"
    organizationalUnits:
      - "Password Management"
    countries:
      - "FR"

---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: bitwarden-api-tls-certificate
  namespace: secrets
  labels:
    app.kubernetes.io/name: bitwarden
    app.kubernetes.io/component: certificate
spec:
  secretName: bitwarden-api-tls
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
    - passwords-api.clementpnn.com
  renewBefore: 720h
  duration: 2160h
  privateKey:
    algorithm: RSA
    size: 2048

---
# ServiceMonitor pour monitoring des services de secrets
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: secrets-stack-monitoring
  namespace: secrets
  labels:
    app.kubernetes.io/name: secrets-stack
    app.kubernetes.io/part-of: kube-prometheus-stack
spec:
  selector:
    matchLabels:
      monitoring: "secrets"
  namespaceSelector:
    matchNames:
      - secrets
  endpoints:
    - port: metrics
      interval: 30s
      path: /metrics
      honorLabels: true

---
# NetworkPolicy pour sécuriser strictement l'accès aux services de secrets
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: secrets-ingress-policy
  namespace: secrets
  labels:
    app.kubernetes.io/name: secrets-stack
    app.kubernetes.io/component: security
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Autoriser Traefik pour les IngressRoutes
    - from:
        - namespaceSelector:
            matchLabels:
              name: traefik
      ports:
        - protocol: TCP
          port: 8200  # Vault
        - protocol: TCP
          port: 8080  # Bitwarden

    # Autoriser le monitoring depuis Prometheus
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 8200  # Vault metrics
        - protocol: TCP
          port: 8080  # Bitwarden metrics

    # Autoriser les communications internes dans le namespace secrets
    - from:
        - namespaceSelector:
            matchLabels:
              name: secrets

    # Autoriser l'accès depuis les autres services du cluster (pour intégrations)
    - from:
        - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 8200  # Vault API pour autres services

  egress:
    # Permettre l'accès vers Keycloak (OIDC)
    - to:
        - namespaceSelector:
            matchLabels:
              name: keycloak
      ports:
        - protocol: TCP
          port: 8080

    # Permettre l'accès vers PostgreSQL
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: postgresql
      ports:
        - protocol: TCP
          port: 5432

    # Permettre l'accès vers Redis
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: redis
      ports:
        - protocol: TCP
          port: 6379

    # Permettre l'accès DNS
    - to: []
      ports:
        - protocol: UDP
          port: 53

    # Permettre SMTP pour Bitwarden
    - to: []
      ports:
        - protocol: TCP
          port: 587
        - protocol: TCP
          port: 465

    # Permettre l'envoi de logs vers Loki
    - to:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 80

    # Permettre l'accès HTTPS sortant (pour API externes, OIDC, etc.)
    - to: []
      ports:
        - protocol: TCP
          port: 443

---
# ConfigMap pour configuration avancée de sécurité des secrets
apiVersion: v1
kind: ConfigMap
metadata:
  name: secrets-security-config
  namespace: secrets
  labels:
    app.kubernetes.io/name: secrets-stack
    app.kubernetes.io/component: config
data:
  security-policy.yaml: |
    # Politique de sécurité pour la stack de secrets
    secrets:
      access:
        # Restriction d'accès par IP pour Vault
        vault:
          allowedNetworks:
            - "192.168.1.0/24"
            - "10.0.0.0/8"
            - "172.16.0.0/12"
            - "10.8.0.0/24"  # VPN OPNsense
            - "10.42.0.0/16" # Cluster internal

        # Politique d'accès pour Bitwarden (plus permissive pour les utilisateurs)
        bitwarden:
          allowPublicAccess: true
          rateLimitPerUser: 100
          sessionTimeout: "4h"

        # Authentification renforcée
        authentication:
          vault:
            requireBasicAuth: true
            requireMFA: false  # À activer avec Vault Enterprise
          bitwarden:
            requireOIDC: true
            allow2FA: true

      monitoring:
        # Alertes de sécurité
        alerts:
          vault:
            unauthorizedAccess: true
            highErrorRate: true
            sealedVault: true
          bitwarden:
            failedLogins: 10
            timeWindow: "5m"
            bruteForceProtection: true

        # Audit logging
        audit:
          enabled: true
          level: "info"
          retention: "365d"  # 1 an pour les secrets
          destinations:
            - loki
            - file

  vault-init.sh: |
    #!/bin/bash
    # Script d'initialisation Vault pour production
    set -e

    # Configuration des variables
    VAULT_ADDR="https://vault.clementpnn.com"
    VAULT_SKIP_VERIFY="false"

    echo "Initialisation de Vault en mode production..."

    # Attendre que Vault soit disponible
    until vault status >/dev/null 2>&1; do
      echo "Attente de Vault..."
      sleep 5
    done

    # Initialiser Vault si nécessaire
    if ! vault status | grep -q "Initialized.*true"; then
      echo "Initialisation de Vault..."
      vault operator init \
        -key-shares=5 \
        -key-threshold=3 \
        -format=json > /tmp/vault-keys.json

      echo "Vault initialisé. Clés sauvegardées temporairement."
      echo "IMPORTANT: Sauvegardez les clés de /tmp/vault-keys.json de manière sécurisée !"
    fi

    echo "Initialisation Vault terminée."

  bitwarden-setup.sh: |
    #!/bin/bash
    # Script de configuration initiale Bitwarden
    set -e

    echo "Configuration initiale de Bitwarden..."

    # Configuration des politiques d'entreprise
    echo "Configuration des politiques de sécurité..."

    # Attendre que Bitwarden soit disponible
    until curl -f https://passwords.clementpnn.com/alive >/dev/null 2>&1; do
      echo "Attente de Bitwarden..."
      sleep 5
    done

    echo "Configuration Bitwarden terminée."
